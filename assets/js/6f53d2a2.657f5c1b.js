"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[458],{85671:e=>{e.exports=JSON.parse('{"functions":[{"name":"GetStore","desc":"Retrieves a FluxStore and then loads it if it hasn\'t been loaded yet.","params":[{"name":"Name","desc":"","lua_type":"string"},{"name":"Template","desc":"","lua_type":"T"},{"name":"Options","desc":"","lua_type":"StoreOptions?"}],"returns":[{"desc":"","lua_type":"FluxStore<T>"}],"function_type":"method","source":{"line":73,"path":"src/init.lua"}}],"properties":[{"name":"Stores","desc":"","lua_type":"Dictionary<FluxStore<T>>","source":{"line":60,"path":"src/init.lua"}}],"types":[{"name":"StoreOptions","desc":"","lua_type":"{ StoreType: StoreType, AutoSave: boolean, AutoSaveInterval: number, FetchTimeout: number, Retries: number, RetryDelay: number, IsPlayerData: boolean, Reconcile: boolean }","source":{"line":23,"path":"src/init.lua"}},{"name":"FluxData<T>","desc":"","lua_type":"{ Key: string, Data: T, Options: StoreOptions, Store: FluxStore<T>, Loaded: boolean, Unloading: boolean, Locked: boolean, new: (Store: FluxStore<T>, Key: string, Options: StoreOptions) -> FluxData<T>, SaveAsync: (self: FluxData<T>) -> (), UnloadAsync: (self: FluxData<T>) -> (), Get: (self: FluxData<T>, Key: string) -> any, Set: (self: FluxData<T>, Key: string, Value: any) -> (), Remove: (self: FluxData<T>, Key: string) -> (), _Reconcile: (self: FluxData<T>) -> boolean }","source":{"line":29,"path":"src/init.lua"}},{"name":"FluxStore<T>","desc":"","lua_type":"{ Name: string, Template: T, Options: StoreOptions, Sessions: Dictionary<FluxData<T>>, NextAutoSave: number, DataStores: Dictionary<DataStore>, DataLocation: Folder?, AutoSaveStart: Signal<() -> ()>, AutoSaveEnd: Signal<() -> ()>, AutoSaveFailed: Signal<(string) -> ()>, new: (Name: string, Template: T, Options: StoreOptions) -> FluxStore<T>, GetAsync: (self: FluxStore<T>, Key: string) -> FluxData<T>, LoadAsync: (self: FluxStore<T>, Key: string) -> FluxData<T>, SaveAsync: (self: FluxStore<T>, Key: string) -> (), UnloadAsync: (self: FluxStore<T>, Key: string) -> (), OnLoaded: (Key: string) -> () }","source":{"line":35,"path":"src/init.lua"}}],"name":"Flux","desc":"DataStore wrapper with a focus on extensibility and easy modification to fit developer needs.","tags":["Server"],"source":{"line":54,"path":"src/init.lua"}}')}}]);