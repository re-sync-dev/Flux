[{"title":"FluxData","type":0,"sectionRef":"#","url":"/flux/api/FluxData","content":"","keywords":""},{"title":"Properties​","type":1,"pageTitle":"FluxData","url":"/flux/api/FluxData#properties","content":" "},{"title":"Key​","type":1,"pageTitle":"FluxData","url":"/flux/api/FluxData#Key","content":"&lt;/&gt; FluxData.Key: string The key that allows us to get and set data from the DataStore.  "},{"title":"Data​","type":1,"pageTitle":"FluxData","url":"/flux/api/FluxData#Data","content":"&lt;/&gt; FluxData.Data: T The data that is stored in the DataStore.  "},{"title":"SessionId​","type":1,"pageTitle":"FluxData","url":"/flux/api/FluxData#SessionId","content":"&lt;/&gt; FluxData.SessionId: string The session ID that can be used to identify the current session. This can only used for player data.  "},{"title":"LoadedAt​","type":1,"pageTitle":"FluxData","url":"/flux/api/FluxData#LoadedAt","content":"&lt;/&gt; FluxData.LoadedAt: number The time that the FluxData was created.  "},{"title":"Loaded​","type":1,"pageTitle":"FluxData","url":"/flux/api/FluxData#Loaded","content":"State &lt;/&gt; FluxData.Loaded: boolean Whether or not the data has been fully loaded from the DataStore.  "},{"title":"Unloading​","type":1,"pageTitle":"FluxData","url":"/flux/api/FluxData#Unloading","content":"State &lt;/&gt; FluxData.Unloading: boolean Whether or not the data is currently being unloaded.  "},{"title":"Locked​","type":1,"pageTitle":"FluxData","url":"/flux/api/FluxData#Locked","content":"State &lt;/&gt; FluxData.Locked: boolean Whether or not the FluxData can be accessed. This is only set to true after the data has been unloaded.  "},{"title":"OnLocked​","type":1,"pageTitle":"FluxData","url":"/flux/api/FluxData#OnLocked","content":"Event &lt;/&gt; FluxData.OnLocked: Signal&lt;(boolean) → ()&gt; Fired when the FluxData is locked. "},{"title":"Functions​","type":1,"pageTitle":"FluxData","url":"/flux/api/FluxData#functions","content":" "},{"title":"new​","type":1,"pageTitle":"FluxData","url":"/flux/api/FluxData#new","content":"&lt;/&gt; FluxData.new( Key: string, Store: FluxStore&lt;T&gt;, Options: StoreOptions? ) → FluxData&lt;T&gt; Constructs a new FluxData object.  "},{"title":"SaveAsync​","type":1,"pageTitle":"FluxData","url":"/flux/api/FluxData#SaveAsync","content":"&lt;/&gt; FluxData:SaveAsync() → Promise&lt;nil&gt; Saves the data to the DataStore(s).  "},{"title":"UnloadAsync​","type":1,"pageTitle":"FluxData","url":"/flux/api/FluxData#UnloadAsync","content":"&lt;/&gt; FluxData:UnloadAsync() → Promise&lt;nil&gt; Unloads the data from the current session.  "},{"title":"AddUserIds​","type":1,"pageTitle":"FluxData","url":"/flux/api/FluxData#AddUserIds","content":"&lt;/&gt; FluxData:AddUserIds(...: number) → nil Pushes new user IDs to the list of user IDs that are allowed to access the data.  "},{"title":"RemoveUserIds​","type":1,"pageTitle":"FluxData","url":"/flux/api/FluxData#RemoveUserIds","content":"&lt;/&gt; FluxData:RemoveUserIds(...: number) → nil Removes user IDs from the list of user IDs that are allowed to access the data. "},{"title":"Flux","type":0,"sectionRef":"#","url":"/flux/api/Flux","content":"","keywords":""},{"title":"Types​","type":1,"pageTitle":"Flux","url":"/flux/api/Flux#types","content":" "},{"title":"FluxData<T>​","type":1,"pageTitle":"Flux","url":"/flux/api/Flux#FluxData<T>","content":"&lt;/&gt; type FluxData&lt;T&gt; = { Key: string, Data: T, Options: StoreOptions, Store: FluxStore&lt;T&gt;, Loaded: boolean, Unloading: boolean, Locked: boolean, new: ( Store: FluxStore&lt;T&gt;, Key: string, Options: StoreOptions ) → FluxData&lt;T&gt;, SaveAsync: (self: FluxData&lt;T&gt;) → (), UnloadAsync: (self: FluxData&lt;T&gt;) → (), Get: ( self: FluxData&lt;T&gt;, Key: string ) → any, Set: ( self: FluxData&lt;T&gt;, Key: string, Value: any ) → (), Remove: ( self: FluxData&lt;T&gt;, Key: string ) → (), _Reconcile: (self: FluxData&lt;T&gt;) → boolean }  "},{"title":"Properties​","type":1,"pageTitle":"Flux","url":"/flux/api/Flux#properties","content":" "},{"title":"Stores​","type":1,"pageTitle":"Flux","url":"/flux/api/Flux#Stores","content":"&lt;/&gt; Flux.Stores: Dictionary&lt;FluxStore&lt;T&gt;&gt;  "},{"title":"Functions​","type":1,"pageTitle":"Flux","url":"/flux/api/Flux#functions","content":" "},{"title":"GetStore​","type":1,"pageTitle":"Flux","url":"/flux/api/Flux#GetStore","content":"&lt;/&gt; Flux:GetStore( Name: string, Template: T, Options: StoreOptions? ) → FluxStore&lt;T&gt; "},{"title":"Types","type":1,"pageTitle":"Flux","url":"/flux/api/Flux##","content":""},{"title":"​","type":1,"pageTitle":"Flux","url":"/flux/api/Flux#StoreOptions","content":"type StoreOptions = { StoreType: StoreType, AutoSave: boolean, AutoSaveInterval: number, FetchTimeout: number, Retries: number, RetryDelay: number, IsPlayerData: boolean, Reconcile: boolean }  "},{"title":"​","type":1,"pageTitle":"Flux","url":"/flux/api/Flux#FluxStore<T>","content":"type FluxStore&lt;T&gt; = { Name: string, Template: T, Options: StoreOptions, Sessions: Dictionary&lt;FluxData&lt;T&gt;&gt;, NextAutoSave: number, DataStores: Dictionary&lt;DataStore &gt;, DataLocation: Folder? , AutoSaveStart: Signal&lt;() → ()&gt;, AutoSaveEnd: Signal&lt;() → ()&gt;, AutoSaveFailed: Signal&lt;(string) → ()&gt;, new: ( Name: string, Template: T, Options: StoreOptions ) → FluxStore&lt;T&gt;, GetAsync: ( self: FluxStore&lt;T&gt;, Key: string ) → FluxData&lt;T&gt;, LoadAsync: ( self: FluxStore&lt;T&gt;, Key: string ) → FluxData&lt;T&gt;, SaveAsync: ( self: FluxStore&lt;T&gt;, Key: string ) → (), UnloadAsync: ( self: FluxStore&lt;T&gt;, Key: string ) → (), OnLoaded: (Key: string) → () }  Retrieves a FluxStore and then loads it if it hasn't been loaded yet. "},{"title":"FluxStore","type":0,"sectionRef":"#","url":"/flux/api/FluxStore","content":"","keywords":""},{"title":"Properties​","type":1,"pageTitle":"FluxStore","url":"/flux/api/FluxStore#properties","content":" "},{"title":"Name​","type":1,"pageTitle":"FluxStore","url":"/flux/api/FluxStore#Name","content":"&lt;/&gt; FluxStore.Name: string   "},{"title":"Template​","type":1,"pageTitle":"FluxStore","url":"/flux/api/FluxStore#Template","content":"&lt;/&gt; FluxStore.Template: T   "},{"title":"Options​","type":1,"pageTitle":"FluxStore","url":"/flux/api/FluxStore#Options","content":"&lt;/&gt; FluxStore.Options: StoreOptions   "},{"title":"Cache​","type":1,"pageTitle":"FluxStore","url":"/flux/api/FluxStore#Cache","content":"&lt;/&gt; FluxStore.Cache: Dictionary&lt;FluxData&lt;T&gt;&gt; Contains sessions that have been loaded based on the key.  "},{"title":"NextAutoSave​","type":1,"pageTitle":"FluxStore","url":"/flux/api/FluxStore#NextAutoSave","content":"&lt;/&gt; FluxStore.NextAutoSave: number The next time that the store should auto save.  "},{"title":"DataStores​","type":1,"pageTitle":"FluxStore","url":"/flux/api/FluxStore#DataStores","content":"&lt;/&gt; FluxStore.DataStores: Dictionary&lt;DataStore &gt; References the shard keys from the template in their respective DataStores.  "},{"title":"AutoSaveStart​","type":1,"pageTitle":"FluxStore","url":"/flux/api/FluxStore#AutoSaveStart","content":"Event &lt;/&gt; FluxStore.AutoSaveStart: Signal&lt;() → ()&gt; Fired when the store starts auto saving.  "},{"title":"AutoSaveEnd​","type":1,"pageTitle":"FluxStore","url":"/flux/api/FluxStore#AutoSaveEnd","content":"Event &lt;/&gt; FluxStore.AutoSaveEnd: Signal&lt;() → ()&gt; Fired when auto saving has finished.  "},{"title":"AutoSaveFailed​","type":1,"pageTitle":"FluxStore","url":"/flux/api/FluxStore#AutoSaveFailed","content":"Event &lt;/&gt; FluxStore.AutoSaveFailed: Signal&lt;(string) → ()&gt; Fired when auto saving has failed.  "},{"title":"OnLoaded​","type":1,"pageTitle":"FluxStore","url":"/flux/api/FluxStore#OnLoaded","content":"Bindable &lt;/&gt; FluxStore.OnLoaded: (Key: string) → () Called when a session has been fully loaded. "},{"title":"Functions​","type":1,"pageTitle":"FluxStore","url":"/flux/api/FluxStore#functions","content":" "},{"title":"new​","type":1,"pageTitle":"FluxStore","url":"/flux/api/FluxStore#new","content":"&lt;/&gt; FluxStore.new( Name: string, Template: T, Options: StoreOptions? ) → FluxStore&lt;T&gt; Constructs a new FluxStore.  "},{"title":"GetAsync​","type":1,"pageTitle":"FluxStore","url":"/flux/api/FluxStore#GetAsync","content":"&lt;/&gt; FluxStore:GetAsync(Key: string) → FluxData&lt;T&gt; Retrieves a session from the cache or loads it if it hasn't been loaded yet.  "},{"title":"LoadAsync​","type":1,"pageTitle":"FluxStore","url":"/flux/api/FluxStore#LoadAsync","content":"&lt;/&gt; FluxStore:LoadAsync(Key: string) → FluxData&lt;T&gt; Loads a session from the DataStore(s).  "},{"title":"SaveAsync​","type":1,"pageTitle":"FluxStore","url":"/flux/api/FluxStore#SaveAsync","content":"&lt;/&gt; FluxStore:SaveAsync(Key: string) → nil Saves a session to the DataStore(s).  "},{"title":"UnloadAsync​","type":1,"pageTitle":"FluxStore","url":"/flux/api/FluxStore#UnloadAsync","content":"&lt;/&gt; FluxStore:UnloadAsync(Key: string) → nil Unloads a session from the cache.  "},{"title":"StartAutoSave​","type":1,"pageTitle":"FluxStore","url":"/flux/api/FluxStore#StartAutoSave","content":"&lt;/&gt; FluxStore:StartAutoSave() → () Starts a new thread to handle auto saving. "},{"title":"InstanceUtil","type":0,"sectionRef":"#","url":"/flux/api/InstanceUtil","content":"","keywords":""},{"title":"Functions​","type":1,"pageTitle":"InstanceUtil","url":"/flux/api/InstanceUtil#functions","content":" "},{"title":"HasProperty​","type":1,"pageTitle":"InstanceUtil","url":"/flux/api/InstanceUtil#HasProperty","content":"&lt;/&gt; InstanceUtil.HasProperty( Instance: Instance , Property: string ) → boolean Checks if an instance has a property.  "},{"title":"SetProperty​","type":1,"pageTitle":"InstanceUtil","url":"/flux/api/InstanceUtil#SetProperty","content":"&lt;/&gt; InstanceUtil.SetProperty( Instance: Instance , Property: string, Value: any ) → nil Sets a property on an instance if it exists.  "},{"title":"Create​","type":1,"pageTitle":"InstanceUtil","url":"/flux/api/InstanceUtil#Create","content":"&lt;/&gt; InstanceUtil.Create(Template: Dictionary&lt;any&gt;&amp;{Children: Dictionary&lt;any&gt;?}) → Instance  Creates instances based on the structure of the template. "},{"title":"PromiseProxy","type":0,"sectionRef":"#","url":"/flux/api/PromiseProxy","content":"","keywords":""},{"title":"Types​","type":1,"pageTitle":"PromiseProxy","url":"/flux/api/PromiseProxy#types","content":" "},{"title":"Promise<T>​","type":1,"pageTitle":"PromiseProxy","url":"/flux/api/PromiseProxy#Promise<T>","content":"&lt;/&gt; type Promise&lt;T&gt; = { Await: () → T, Then: (Callback: (T) → ()) → (), Catch: (Callback: (string) → ()) → () } Fixes the lack of any typing for evaera's Promise library. "},{"title":"Functions​","type":1,"pageTitle":"PromiseProxy","url":"/flux/api/PromiseProxy#functions","content":" "},{"title":"async​","type":1,"pageTitle":"PromiseProxy","url":"/flux/api/PromiseProxy#async","content":"&lt;/&gt; PromiseProxy.async(Handler: ( Resolve: (T) → (), Reject: (any) → () ) → ()) → Promise&lt;T&gt; Creates proxy promise to mimic specific methods of a promise. "},{"title":"String","type":0,"sectionRef":"#","url":"/flux/api/String","content":"","keywords":""},{"title":"Functions​","type":1,"pageTitle":"String","url":"/flux/api/String#functions","content":" "},{"title":"Random​","type":1,"pageTitle":"String","url":"/flux/api/String#Random","content":"&lt;/&gt; String.Random( Length: number, Characters: string?, Generator: Random? ) → string  "},{"title":"Table","type":0,"sectionRef":"#","url":"/flux/api/Table","content":"","keywords":""},{"title":"Functions​","type":1,"pageTitle":"Table","url":"/flux/api/Table#functions","content":" "},{"title":"Length​","type":1,"pageTitle":"Table","url":"/flux/api/Table#Length","content":"&lt;/&gt; Table.Length(TableToCheck: GenericTable) → number Returns the true length of a table instead of differing between array and dictionary tables.  "},{"title":"Keys​","type":1,"pageTitle":"Table","url":"/flux/api/Table#Keys","content":"&lt;/&gt; Table.Keys(Table: GenericTable) → Array&lt;any&gt; Returns an array of keys from a table.  "},{"title":"Values​","type":1,"pageTitle":"Table","url":"/flux/api/Table#Values","content":"&lt;/&gt; Table.Values(Table: GenericTable) → Array&lt;any&gt; Returns an array of values from a table.  "},{"title":"Copy<T>​","type":1,"pageTitle":"Table","url":"/flux/api/Table#Copy<T>","content":"&lt;/&gt; Table.Copy&lt;T&gt;( TableToCopy: T, IsDeep: boolean? ) → T Copies a table and returns a new table with the same values. Has the option to DeepCopy the table.  "},{"title":"Merge<A, B>​","type":1,"pageTitle":"Table","url":"/flux/api/Table#Merge<A, B>","content":"&lt;/&gt; Table.Merge&lt;A, B&gt;( To: A, From: B, IsDeep: boolean? ) → A&amp;B Merges two tables together and returns the result of the merge.  "},{"title":"Reconcile<A, B>​","type":1,"pageTitle":"Table","url":"/flux/api/Table#Reconcile<A, B>","content":"&lt;/&gt; Table.Reconcile&lt;A, B&gt;( To: A, From: B, IsDeep: boolean? ) → A&amp;B Reconciles two tables together and returns the result of the reconciliation.  "},{"title":"DeepFreeze​","type":1,"pageTitle":"Table","url":"/flux/api/Table#DeepFreeze","content":"&lt;/&gt; Table.DeepFreeze(TableToFreeze: GenericTable) → () Recursively freezes all tables within a table.  "},{"title":"IsArray​","type":1,"pageTitle":"Table","url":"/flux/api/Table#IsArray","content":"&lt;/&gt; Table.IsArray(TableToCheck: GenericTable) → boolean Determines if a table is an array or not.  "},{"title":"Reverse​","type":1,"pageTitle":"Table","url":"/flux/api/Table#Reverse","content":"&lt;/&gt; Table.Reverse(TableToReverse: Array&lt;any&gt;) → () Reverses the order of elements in an array. "}]